require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TodosController, type: :controller do
  let(:todo) { todo = create(:todo) }

  let(:completed_todo) { completed_todo = create(:completed_todo) }

  let(:todo_list) { todo_list = create_list(:todo, 5) }

  let(:valid_attributes) { attributes_for :todo }

  let(:invalid_attributes) { attributes_for :todo, title: "" }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TodosController. Be sure to keep this updated too.
  # let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all todos as @todos" do
      get :index
      # Couldn't get line 51 to work. Suspect issue with the way
      # assigns method works with Rails 5 and rails-controller-testing gem

      # expect(assigns(:todo_list)).to eq(todo_list)
      assert_equal Todo.all, assigns(:todos)
    end
  end

  describe "GET #show" do
    it "assigns the requested todo as @todo" do
      get :show, params: { id: todo.to_param }
      expect(assigns(:todo)).to eq(todo)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Todo" do
        expect {
          post :create, params: { todo: valid_attributes }
        }.to change(Todo, :count).by(1)
      end

      it "assigns a newly created todo as @todo" do
        post :create, params: { todo: valid_attributes }
        expect(assigns(:todo)).to be_a(Todo)
        expect(assigns(:todo)).to be_persisted
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved todo as @todo" do
        post :create, params: { todo: invalid_attributes }
        expect(assigns(:todo)).to be_a_new(Todo)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) { attributes_for :todo, title: "Test an updated todo" }

      it "updates the requested todo" do
        put :update, params: { id: todo.to_param, todo: new_attributes }
        expect { todo.reload }.to change(todo, :title).from(
          "Test an uncompleted todo").to("Test an updated todo"
        )
      end

      it "assigns the requested todo as @todo" do
        put :update, params: { id: todo.to_param, todo: new_attributes }
        expect(assigns(:todo)).to eq(todo)
        expect(assigns(:todo)).to be_persisted
      end
    end

    context "with invalid params" do
      it "assigns the todo as @todo" do
        put :update, params: { id: todo.to_param, todo: invalid_attributes }
        expect(assigns(:todo)).to eq(todo)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested todo" do
      todo
      expect {
        delete :destroy, params: { id: todo.to_param }
      }.to change(Todo, :count).by(-1)
    end
  end
end
